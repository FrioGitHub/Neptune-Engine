// Generated by view binder compiler. Do not edit!
package com.frio.neptune.databinding;

import android.opengl.GLSurfaceView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.frio.neptune.R;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityEditorBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppBarLayout appBar;

  @NonNull
  public final LinearLayout objectLayout;

  @NonNull
  public final RecyclerView objects;

  @NonNull
  public final TextView objectsCount;

  @NonNull
  public final LinearLayout propertyLayout;

  @NonNull
  public final View separator;

  @NonNull
  public final GLSurfaceView surface;

  @NonNull
  public final MaterialToolbar toolbar;

  private ActivityEditorBinding(@NonNull ConstraintLayout rootView, @NonNull AppBarLayout appBar,
      @NonNull LinearLayout objectLayout, @NonNull RecyclerView objects,
      @NonNull TextView objectsCount, @NonNull LinearLayout propertyLayout, @NonNull View separator,
      @NonNull GLSurfaceView surface, @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.appBar = appBar;
    this.objectLayout = objectLayout;
    this.objects = objects;
    this.objectsCount = objectsCount;
    this.propertyLayout = propertyLayout;
    this.separator = separator;
    this.surface = surface;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityEditorBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityEditorBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_editor, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityEditorBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appBar;
      AppBarLayout appBar = ViewBindings.findChildViewById(rootView, id);
      if (appBar == null) {
        break missingId;
      }

      id = R.id.objectLayout;
      LinearLayout objectLayout = ViewBindings.findChildViewById(rootView, id);
      if (objectLayout == null) {
        break missingId;
      }

      id = R.id.objects;
      RecyclerView objects = ViewBindings.findChildViewById(rootView, id);
      if (objects == null) {
        break missingId;
      }

      id = R.id.objectsCount;
      TextView objectsCount = ViewBindings.findChildViewById(rootView, id);
      if (objectsCount == null) {
        break missingId;
      }

      id = R.id.propertyLayout;
      LinearLayout propertyLayout = ViewBindings.findChildViewById(rootView, id);
      if (propertyLayout == null) {
        break missingId;
      }

      id = R.id.separator;
      View separator = ViewBindings.findChildViewById(rootView, id);
      if (separator == null) {
        break missingId;
      }

      id = R.id.surface;
      GLSurfaceView surface = ViewBindings.findChildViewById(rootView, id);
      if (surface == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityEditorBinding((ConstraintLayout) rootView, appBar, objectLayout, objects,
          objectsCount, propertyLayout, separator, surface, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
