/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/java/com/frio/neptune/MainActivity.java:84: Warning: Resource IDs will be non-final by default in Android Gradle Plugin version 8.0, avoid using them in switch case statements [NonConstantResourceId]
      case R.id.square:
           ~~~~~~~~~~~
/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/java/com/frio/neptune/MainActivity.java:89: Warning: Resource IDs will be non-final by default in Android Gradle Plugin version 8.0, avoid using them in switch case statements [NonConstantResourceId]
      case R.id.triangle:
           ~~~~~~~~~~~~~
/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/java/com/frio/neptune/MainActivity.java:94: Warning: Resource IDs will be non-final by default in Android Gradle Plugin version 8.0, avoid using them in switch case statements [NonConstantResourceId]
      case R.id.circle:
           ~~~~~~~~~~~

   Explanation for issues of type "NonConstantResourceId":
   Avoid the usage of resource IDs where constant expressions are required.

   A future version of the Android Gradle Plugin will generate R classes with
   non-constant IDs in order to improve the performance of incremental
   compilation.

/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/res/values-night/themes.xml:16: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
        <item name="android:statusBarColor" tools:targetApi="l">#1D1D1D</item>
                                            ~~~~~~~~~~~~~~~~~~~
/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/res/values/themes.xml:16: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
        <item name="android:statusBarColor" tools:targetApi="l">#1D1D1D</item>
                                            ~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ObsoleteSdkInt":
   This check flags version checks that are not necessary, because the
   minSdkVersion (or surrounding known API level) is already at least as high
   as the version checked for.

   Similarly, it also looks for resources in -vNN folders, such as values-v14
   where the version qualifier is less than or equal to the minSdkVersion,
   where the contents should be merged into the best folder.

/data/data/com.itsaky.androidide/files/home/logsender/com/itsaky/androidide/logsender/LogSender.java:21: Warning: Do not place Android context classes in static fields (static reference to LogSender which has field ctx pointing to Context); this is a memory leak [StaticFieldLeak]
 private static LogSender instance;
         ~~~~~~

   Explanation for issues of type "StaticFieldLeak":
   A static field will leak contexts.

   Non-static inner classes have an implicit reference to their outer class.
   If that outer class is for example a Fragment or Activity, then this
   reference means that the long-running handler/loader/task will hold a
   reference to the activity which prevents it from getting garbage
   collected.

   Similarly, direct field references to activities and fragments from these
   longer running instances can cause leaks.

   ViewModel classes should never point to Views or non-application Contexts.

/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/res/values/colors.xml:4: Warning: The resource R.color.purple_200 appears to be unused [UnusedResources]
    <color name="purple_200">#FFBB86FC</color>
           ~~~~~~~~~~~~~~~~~
/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/res/values/colors.xml:5: Warning: The resource R.color.purple_500 appears to be unused [UnusedResources]
    <color name="purple_500">#FF6200EE</color>
           ~~~~~~~~~~~~~~~~~
/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/res/values/colors.xml:6: Warning: The resource R.color.purple_700 appears to be unused [UnusedResources]
    <color name="purple_700">#FF3700B3</color>
           ~~~~~~~~~~~~~~~~~
/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/res/values/colors.xml:7: Warning: The resource R.color.teal_200 appears to be unused [UnusedResources]
    <color name="teal_200">#FF03DAC5</color>
           ~~~~~~~~~~~~~~~
/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/res/values/colors.xml:8: Warning: The resource R.color.teal_700 appears to be unused [UnusedResources]
    <color name="teal_700">#FF018786</color>
           ~~~~~~~~~~~~~~~
/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/res/values/colors.xml:9: Warning: The resource R.color.black appears to be unused [UnusedResources]
    <color name="black">#FF000000</color>
           ~~~~~~~~~~~~
/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/res/values/colors.xml:10: Warning: The resource R.color.white appears to be unused [UnusedResources]
    <color name="white">#FFFFFFFF</color>
           ~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.

   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests=true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests=true.

/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/java/com/frio/neptune/MainActivity.java:40: Warning: Custom view `GLSurfaceView` has setOnTouchListener called on it but does not override performClick [ClickableViewAccessibility]
    this.mGLSurface.setOnTouchListener(
    ^
/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/java/com/frio/neptune/MainActivity.java:41: Warning: onTouch lambda should call View#performClick when a click is detected [ClickableViewAccessibility]
        (view, event) -> {
        ^

   Explanation for issues of type "ClickableViewAccessibility":
   If a View that overrides onTouchEvent or uses an OnTouchListener does not
   also implement performClick and call it when clicks are detected, the View
   may not handle accessibility actions properly. Logic handling the click
   actions should ideally be placed in View#performClick as some accessibility
   services invoke performClick when a click action should occur.

/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/res/menu/menu.xml:8: Warning: Hardcoded string "Novo objeto", should use @string resource [HardcodedText]
        android:title="Novo objeto">
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/res/menu/menu.xml:12: Warning: Hardcoded string "Quadrado", should use @string resource [HardcodedText]
                android:title="Quadrado"/>
                ~~~~~~~~~~~~~~~~~~~~~~~~
/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/res/menu/menu.xml:15: Warning: Hardcoded string "Triângulo", should use @string resource [HardcodedText]
                android:title="Triângulo"/>
                ~~~~~~~~~~~~~~~~~~~~~~~~~
/storage/emulated/0/AndroidIDEProjects/NeptuneEngine/app/src/main/res/menu/menu.xml:18: Warning: Hardcoded string "Círculo", should use @string resource [HardcodedText]
                android:title="Círculo"/>
                ~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "HardcodedText":
   Hardcoding text attributes directly in layout files is bad for several
   reasons:

   * When creating configuration variations (for example for landscape or
   portrait) you have to repeat the actual text (and keep it up to date when
   making changes)

   * The application cannot be translated to other languages by just adding
   new translations for existing string resources.

   There are quickfixes to automatically extract this hardcoded string into a
   resource lookup.

0 errors, 19 warnings
